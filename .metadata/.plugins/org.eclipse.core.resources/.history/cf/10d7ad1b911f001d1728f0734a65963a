package com.productapp.api;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.productapp.dto.ProductDto;
import com.productapp.repository.Product;
import com.productapp.service.ProductService;

@RestController
@RequestMapping(path="api")
public class ProductApi {
	private ProductService productService;

	@Autowired
	public ProductApi(ProductService productService) {
		this.productService = productService;
	}
	
	@GetMapping(path = "products", produces = {MediaType.APPLICATION_JSON_VALUE, 
			MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<List<Product>> findAll(){
		return ResponseEntity.status(HttpStatus.OK).body(productService.findAll());
	}
	
	@GetMapping(path = "products/{id}")
	public ResponseEntity<Product> findById(@PathVariable(name = "id") int id){
		return ResponseEntity.ok(productService.getById(id));
	}
	@GetMapping(path = "productsV2/{id}")
	public EntityModel<ProductDto>  findByIdLink(@PathVariable(name = "id") int id){
		Link link=linkTo(methodOn(ProductApi.class).findByIdLink(id)).withSelfRel();
		Product product=productService.getById(id);
		//convert product into productdto
		ProductDto productDto = new ProductDto();
		productDto.setId(product.getId());
		productDto.setName(product.getName());
		productDto.setPrice(product.getPrice());
		productDto.add(link);
		return EntityModel.of(product);
}
	@PostMapping(path = "products")
	public ResponseEntity<Product> addProduct(@Valid @RequestBody ProductDto productDto) {
		// i need to convert dto to entity class
		Product product = convertProductDtoToProduct(productDto);
		Product savedProduct = productService.addProduct(product);
		return ResponseEntity.status(HttpStatus.CREATED).body(savedProduct);
	}
	
	private Product convertProductDtoToProduct(ProductDto productDto) {
		Product product=new Product();
		product.setId(productDto.getId());
		product.setName(productDto.getName());
		product.setPrice(productDto.getPrice());
		return product;
	}

	@DeleteMapping(path = "products/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable(name = "id") int id){
		 productService.deleteProduct(id);
		 return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
	}
	
	@PutMapping(path = "products/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable(name = "id") int id, @RequestBody Product product){
		return ResponseEntity.status(HttpStatus.CREATED).body(productService.updateProduct(id, product));
	}
}
